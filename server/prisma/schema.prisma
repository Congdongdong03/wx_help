generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model admin_user {
  id            Int     @id @default(autoincrement())
  username      String  @unique(map: "uniq_admin_username") @db.VarChar(32)
  password_hash String  @db.VarChar(128)
  role          String? @default("admin") @db.VarChar(16)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model category {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(32)
  code String @db.VarChar(32)
}

model cities {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(50)
  code       String   @unique(map: "unique_city_code") @db.VarChar(50)
  is_hot     Boolean? @default(false)
  sort_order Int?     @default(0)
  is_active  Boolean? @default(true)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model favorite {
  id         BigInt    @id @default(autoincrement())
  user_id    Int
  post_id    Int
  created_at DateTime? @default(now()) @db.DateTime(0)
  posts      posts     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_favorite_post")
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_favorite_user")

  @@unique([user_id, post_id], map: "uniq_user_post")
  @@index([post_id], map: "fk_favorite_post")
  @@index([user_id], map: "idx_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model feedback {
  id         BigInt         @id @default(autoincrement())
  user_id    Int
  content    String         @db.VarChar(500)
  image      String?        @db.VarChar(255)
  type       feedback_type? @default(advice)
  status     Int?           @default(0) @db.TinyInt
  created_at DateTime?      @default(now()) @db.DateTime(0)
  users      users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_feedback_user")

  @@index([user_id], map: "idx_user_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model polish_log {
  id          BigInt    @id @default(autoincrement())
  user_id     Int
  post_id     Int
  polished_at DateTime? @default(now()) @db.DateTime(0)
  posts       posts     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_polish_post")
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_polish_user")

  @@index([post_id], map: "fk_polish_post")
  @@index([user_id, post_id], map: "idx_user_post")
}

model posts {
  id               Int           @id @default(autoincrement())
  user_id          Int
  title            String        @db.VarChar(255)
  category         String?       @db.VarChar(50)
  sub_category     String?       @db.VarChar(50)
  content          String?       @db.Text
  city_code        String?       @db.VarChar(50)
  status           posts_status? @default(pending)
  created_at       DateTime?     @default(now()) @db.Timestamp(0)
  updated_at       DateTime?     @default(now()) @db.Timestamp(0)
  price            Decimal?      @db.Decimal(10, 2)
  price_unit       String?       @db.VarChar(10)
  contact_info     String?       @db.VarChar(255)
  expires_at       DateTime?     @db.DateTime(0)
  last_polished_at DateTime?     @default(now()) @db.DateTime(0)
  view_count       Int?          @default(0)
  favorite_count   Int?          @default(0)
  recommend_score  Decimal?      @default(0) @db.Decimal(5, 2)
  quality_score    Decimal?      @default(0) @db.Decimal(3, 2)
  pinned_until     DateTime?     @db.DateTime(0)
  is_pinned        Boolean?      @default(false)
  images           String?       @db.Text
  favorite         favorite[]
  polish_log       polish_log[]
  users            users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "posts_ibfk_1")

  @@index([user_id], map: "posts_ibfk_1")
  @@index([city_code], map: "idx_city_code")
  @@index([category], map: "idx_category")
  @@index([status], map: "idx_status")
  @@index([created_at], map: "idx_created_at")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  id            Int           @id @default(autoincrement())
  username      String        @unique(map: "username") @db.VarChar(255)
  openid        String?       @unique(map: "uk_openid") @db.VarChar(255)
  unionid       String?       @db.VarChar(255)
  session_key   String?       @db.VarChar(255)
  nickname      String?       @db.VarChar(255)
  avatar_url    String?       @db.Text
  phone         String?       @db.VarChar(20)
  email         String?       @db.VarChar(255)
  gender        Int?          @db.TinyInt
  city          String?       @db.VarChar(100)
  province      String?       @db.VarChar(100)
  country       String?       @db.VarChar(100)
  language      String?       @default("zh_CN") @db.VarChar(10)
  status        users_status? @default(active)
  last_login_at DateTime?     @db.Timestamp(0)
  created_at    DateTime?     @default(now()) @db.Timestamp(0)
  updated_at    DateTime?     @default(now()) @db.Timestamp(0)
  favorite      favorite[]
  feedback      feedback[]
  polish_log    polish_log[]
  posts         posts[]

  @@index([created_at], map: "idx_created_at")
  @@index([status], map: "idx_status")
  @@index([unionid], map: "idx_unionid")
}

model weekly_deals {
  id              Int      @id @default(autoincrement())
  title           String   @default("WWS/Coles 每周特价打折商品") @db.VarChar(100)
  image_url       String?  @db.VarChar(500)
  week_start_date DateTime @db.Date
  is_active       Boolean  @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt

  @@index([week_start_date, is_active], map: "idx_week_active")
}

enum feedback_type {
  advice
  bug
  report
}

enum post_category {
  help
  secondhand
  housing
}

enum posts_status {
  draft
  pending
  published
  failed
}

enum users_status {
  active
  inactive
  banned
}

model catalogue_images {
  id          Int      @id @default(autoincrement())
  store_name  String   @db.VarChar(50)
  page_number Int
  image_data  String   @db.LongText
  week_date   DateTime @db.Date
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  @@index([store_name, week_date], map: "idx_store_week")
  @@map("catalogue_images")
}

// 数据验证规则
model ValidationRule {
  id         Int      @id @default(autoincrement())
  table_name String   @db.VarChar(50)
  field_name String   @db.VarChar(50)
  rule_type  String   @db.VarChar(20)
  rule_value String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([table_name, field_name])
  @@index([table_name])
}

// 系统配置
model SystemConfig {
  id          Int      @id @default(autoincrement())
  key         String   @unique @db.VarChar(50)
  value       String   @db.Text
  description String?  @db.VarChar(255)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@index([key])
}
