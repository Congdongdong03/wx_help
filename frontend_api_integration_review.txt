# 小程序接口清单 (Provided by User)

## 一、用户相关接口

### 1.1 微信登录
- **POST** `/api/user/wx-login`
  - 请求参数：`{ "code": "微信登录临时code", "nickName": "用户昵称", "avatarUrl": "用户头像URL" }`
  - 返回数据：`{ "token": "JWT token", "userInfo": { "id", "openid", "nickname", "avatarUrl", "status" } }`

### 1.2 获取用户信息
- **GET** `/api/user/info` (Auth required)
  - 返回数据：`{ "id", "openid", "nickname", "avatarUrl", "email", "status", "createdAt" }`

### 1.3 更新用户资料
- **PUT** `/api/user/profile` (Auth required)
  - 请求参数：`{ "nickname", "email" }`

### 1.4 退出登录
- **POST** `/api/user/logout` (Auth required)

## 二、帖子相关接口

### 2.1 获取帖子列表
- **GET** `/api/posts`
  - 查询参数：`page`, `pageSize`, `type`, `city`, `keyword`
  - 返回数据：`{ "total", "page", "pageSize", "list": [{ "id", "userId", "userInfo": {"nickname", "avatarUrl"}, "type", "title", "description", "images", "price", "city", "status", "createdAt", "polishedTime" }] }`

### 2.2 获取帖子详情
- **GET** `/api/posts/{postId}`
  - 返回数据：`{ "id", "userId", "userInfo", "type", "title", "description", "images", "price", "extraFields", "contactWechat", "city", "status", "isFavorited", "createdAt", "updatedAt" }`

### 2.3 发布新帖子
- **POST** `/api/posts` (Auth required)
  - 请求参数：`{ "type", "title", "description", "images", "price", "extraFields", "contactWechat", "city" }`

### 2.4 更新帖子
- **PUT** `/api/posts/{postId}` (Auth required)
  - 请求参数：同发布帖子

### 2.5 删除帖子
- **DELETE** `/api/posts/{postId}` (Auth required)

### 2.6 获取我的发布
- **GET** `/api/user/posts` (Auth required)
  - 查询参数：`page`, `pageSize`, `status`

### 2.7 擦亮帖子
- **POST** `/api/posts/{postId}/polish` (Auth required)
  - 返回数据：`{ "success", "message", "nextPolishTime" }`

## 三、收藏相关接口

### 3.1 收藏帖子
- **POST** `/api/favorites` (Auth required)
  - 请求参数：`{ "postId" }`

### 3.2 取消收藏
- **DELETE** `/api/favorites/{postId}` (Auth required)

### 3.3 获取收藏列表
- **GET** `/api/user/favorites` (Auth required)
  - 查询参数：`page`, `pageSize`, `type`

## 四、反馈/举报接口

### 4.1 提交反馈
- **POST** `/api/feedback` (Auth required)
  - 请求参数：`{ "type", "content", "image" }`

### 4.2 举报帖子
- **POST** `/api/feedback/report` (Auth required)
  - 请求参数：`{ "postId", "reason", "description" }`

## 五、分类相关接口

### 5.1 获取分类列表
- **GET** `/api/categories`
  - 返回数据：`[{ "id", "name", "code", "icon" }]`

## 六、其他功能接口

### 6.1 上传图片
- **POST** `/api/upload/image` (Auth required)
  - 请求参数：FormData (`file`)
  - 返回数据：`{ "url": "image_url" }`

### 6.2 获取首页推荐
- **GET** `/api/home/recommend`
  - 返回数据：`{ "banners": [], "hotPosts": [] }`

### 6.3 获取常见问题
- **GET** `/api/faq`
  - 返回数据：`[{ "id", "question", "answer" }]`

## 七、管理后台接口 (N/A for user-facing frontend)
## 八、统计相关接口 (N/A for user-facing frontend)

---
## Frontend API Integration Review & Action Plan (Revised)
---

**I. General Setup (High Priority)**

1.  **`src/types/api.ts`:** Define TypeScript interfaces for all request payloads and response data structures based *exactly* on the API list.
2.  **`src/services/api.ts`:** Create functions for *each relevant API endpoint* using `Taro.request`. Manage `API_BASE_URL` via environment config. Implement a common response handler (check `code === 0`) and Authorization header injection.

**II. API Endpoint Coverage & Frontend Status**

**1. User Related (`src/app.tsx`, `src/components/LoginModal`, New: `ProfilePage`)**
    *   **1.1 `POST /api/user/wx-login`**: 
        *   **Status:** PLANNED. `LoginModal` to call this via API service, replacing `mockLoginAPI`.
    *   **1.2 `GET /api/user/info`**: 
        *   **Status:** FEATURE GAP / PARTIAL. Currently, only login response info is stored. 
        *   **Action:** Create `ProfilePage`. Call this API on `ProfilePage` load and potentially in `app.tsx` on `useDidShow` to refresh stored user info if needed. Update `UserInfo` type in `app.tsx` based on this response.
    *   **1.3 `PUT /api/user/profile`**: 
        *   **Status:** FEATURE GAP.
        *   **Action:** Implement UI in `ProfilePage` for editing nickname/email. Create service function.
    *   **1.4 `POST /api/user/logout`**: 
        *   **Status:** PLANNED.
        *   **Action:** Implement service function. Call from `clearLoginState` in `app.tsx`, triggered by a logout button (likely on `ProfilePage`).

**2. Post Related (`src/pages/post/...`, `src/pages/my/my-posts`, New: `ExplorePage`, `PostDetailPage`)**
    *   **2.1 `GET /api/posts` (Get Post List):** 
        *   **Status:** FEATURE GAP.
        *   **Action:** Create `ExplorePage` (or Home Page) to display posts. Implement service function with pagination and filters (`type`, `city`, `keyword`).
    *   **2.2 `GET /api/posts/{postId}` (Get Post Detail):** 
        *   **Status:** FEATURE GAP.
        *   **Action:** Create `PostDetailPage`. Implement service function. Crucial for displaying full content, `extraFields`, and `isFavorited` state.
    *   **2.3 `POST /api/posts` (Create Post):** 
        *   **Status:** PLANNED. `PostFormPage`'s `handleSubmit`.
        *   **Action:** Implement service function. Ensure payload includes transformed `extraFields`, `city`, and uploaded `images` URLs.
    *   **2.4 `PUT /api/posts/{postId}` (Update Post):** 
        *   **Status:** PLANNED. `PostFormPage`'s `handleSubmit` when `editingPostOriginalId` is set.
        *   **Action:** Implement service function. Similar payload requirements as create.
    *   **2.5 `DELETE /api/posts/{postId}` (Delete Post):** 
        *   **Status:** PLANNED. `MyPostsPage`'s "下架" action.
        *   **Action:** Implement service function. Consider if this sets a 'deleted' status or actually removes. The frontend should refresh the list.
    *   **2.6 `GET /api/user/posts` (Get My Posts):** 
        *   **Status:** PLANNED. `MyPostsPage` to replace mock data.
        *   **Action:** Implement service function with pagination and `status` filter.
    *   **2.7 `POST /api/posts/{postId}/polish` (Polish Post):** 
        *   **Status:** PLANNED. `MyPostsPage`'s "擦亮" button.
        *   **Action:** Implement service function.

**3. Favorite Related (New: `MyFavoritesPage`, UI elements on post display)**
    *   **3.1 `POST /api/favorites` (Favorite Post):** 
        *   **Status:** FEATURE GAP.
        *   **Action:** Implement service function. Add UI (button/icon) to `PostDetailPage` and post list items.
    *   **3.2 `DELETE /api/favorites/{postId}` (Unfavorite Post):** 
        *   **Status:** FEATURE GAP.
        *   **Action:** Implement service function. Link to favorite toggle UI.
    *   **3.3 `GET /api/user/favorites` (Get Favorite List):** 
        *   **Status:** FEATURE GAP.
        *   **Action:** Create `MyFavoritesPage`. Implement service function with pagination and `type` filter.

**4. Feedback/Report Related (New: `FeedbackPage/Modal`, UI on Post Detail)**
    *   **4.1 `POST /api/feedback` (Submit Feedback):** 
        *   **Status:** FEATURE GAP.
        *   **Action:** Create `FeedbackPage` or modal with form for `type`, `content`, `image` (uses 6.1 for upload). Implement service function.
    *   **4.2 `POST /api/feedback/report` (Report Post):** 
        *   **Status:** FEATURE GAP.
        *   **Action:** Add "Report" button to `PostDetailPage`. UI (modal) to collect `reason`, `description`. Implement service function, passing `postId`.

**5. Category Related (`src/pages/post/index.tsx`)**
    *   **5.1 `GET /api/categories` (Get Category List):** 
        *   **Status:** PLANNED.
        *   **Action:** Implement service function. `PostCategorySelectionPage` to fetch and display dynamically.

**6. Other Functionality**
    *   **6.1 `POST /api/upload/image` (Upload Image):** 
        *   **Status:** PLANNED (Critical for 2.3, 2.4, 4.1).
        *   **Action:** Implement `uploadImage(filePath)` service function using `Taro.uploadFile`. `PostFormPage` and `FeedbackPage` will use this.
    *   **6.2 `GET /api/home/recommend` (Get Home Recommend):** 
        *   **Status:** FEATURE GAP.
        *   **Action:** Call from new `ExplorePage`/`HomePage`. Display banners and hot posts.
    *   **6.3 `GET /api/faq` (Get FAQ):** 
        *   **Status:** FEATURE GAP.
        *   **Action:** Create `FAQPage`. Implement service function to fetch and display.

**III. Key Frontend Implementation Notes (Reiteration)**

*   **Payloads for Post Create/Update (2.3, 2.4):** Pay close attention to structuring the `extraFields` object from your flat `formData` in `PostFormPage` before sending to the backend. Also, ensure `city` and `images` (array of URLs) are included.
*   **Loading Post for Edit (2.2, `PostFormPage`):** When fetching post details for editing, correctly map the `extraFields` from the API response back into your flat `formData` structure. Handle the `images` array (remote URLs) for display.
*   **Authentication Headers:** Your API service layer must consistently add `Authorization: Bearer {token}` to requests requiring authentication.
*   **Error Handling:** Implement robust error handling for all API calls (network errors, API error codes like 401, 403, 422, 500).
*   **Pagination:** Implement for all list views (`/api/posts`, `/api/user/posts`, `/api/user/favorites`).

**IV. Priorities for Implementation**

1.  **Foundation:** `src/types/api.ts`, `src/services/api.ts` (initially for login, categories, posts).
2.  **Core User Flow:** Real login (`app.tsx`, `LoginModal`).
3.  **Core Post Flow:** Dynamic categories (`PostCategorySelectionPage`), real image uploads, create/edit/view user's posts (`PostFormPage`, `MyPostsPage`).
4.  **Main Content Viewing:** `ExplorePage` (`GET /api/posts`), `PostDetailPage` (`GET /api/posts/{postId}`).
5.  **Secondary Features:** Favorites, Feedback/Report, User Profile, FAQ.

This provides a direct checklist of API integration points against your frontend. Admin and Statistics APIs are confirmed out of scope for this review. 